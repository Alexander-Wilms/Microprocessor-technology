
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000146  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001da  2**0
                  ALLOC
  3 .stab         00000558  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5e  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <main>:
// PIND, PIND3 (3. Bit im IO-Register PIND) etc.
#include <avr/io.h>			// AVR header file for IO ports
#include <stdio.h>

int main(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	while (1) {
		printf("a");
  bc:	81 e6       	ldi	r24, 0x61	; 97
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 63 00 	call	0xc6	; 0xc6 <putchar>
	}
  c4:	fb cf       	rjmp	.-10     	; 0xbc <main+0x8>

000000c6 <putchar>:
  c6:	60 91 02 01 	lds	r22, 0x0102
  ca:	70 91 03 01 	lds	r23, 0x0103
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <fputc>

000000d2 <fputc>:
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	fb 01       	movw	r30, r22
  dc:	23 81       	ldd	r18, Z+3	; 0x03
  de:	21 fd       	sbrc	r18, 1
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <fputc+0x16>
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	28 c0       	rjmp	.+80     	; 0x138 <fputc+0x66>
  e8:	22 ff       	sbrs	r18, 2
  ea:	16 c0       	rjmp	.+44     	; 0x118 <fputc+0x46>
  ec:	46 81       	ldd	r20, Z+6	; 0x06
  ee:	57 81       	ldd	r21, Z+7	; 0x07
  f0:	24 81       	ldd	r18, Z+4	; 0x04
  f2:	35 81       	ldd	r19, Z+5	; 0x05
  f4:	42 17       	cp	r20, r18
  f6:	53 07       	cpc	r21, r19
  f8:	44 f4       	brge	.+16     	; 0x10a <fputc+0x38>
  fa:	a0 81       	ld	r26, Z
  fc:	b1 81       	ldd	r27, Z+1	; 0x01
  fe:	9d 01       	movw	r18, r26
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	31 83       	std	Z+1, r19	; 0x01
 106:	20 83       	st	Z, r18
 108:	8c 93       	st	X, r24
 10a:	26 81       	ldd	r18, Z+6	; 0x06
 10c:	37 81       	ldd	r19, Z+7	; 0x07
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	37 83       	std	Z+7, r19	; 0x07
 114:	26 83       	std	Z+6, r18	; 0x06
 116:	10 c0       	rjmp	.+32     	; 0x138 <fputc+0x66>
 118:	eb 01       	movw	r28, r22
 11a:	09 2f       	mov	r16, r25
 11c:	18 2f       	mov	r17, r24
 11e:	00 84       	ldd	r0, Z+8	; 0x08
 120:	f1 85       	ldd	r31, Z+9	; 0x09
 122:	e0 2d       	mov	r30, r0
 124:	09 95       	icall
 126:	89 2b       	or	r24, r25
 128:	e1 f6       	brne	.-72     	; 0xe2 <fputc+0x10>
 12a:	8e 81       	ldd	r24, Y+6	; 0x06
 12c:	9f 81       	ldd	r25, Y+7	; 0x07
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	9f 83       	std	Y+7, r25	; 0x07
 132:	8e 83       	std	Y+6, r24	; 0x06
 134:	81 2f       	mov	r24, r17
 136:	90 2f       	mov	r25, r16
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
