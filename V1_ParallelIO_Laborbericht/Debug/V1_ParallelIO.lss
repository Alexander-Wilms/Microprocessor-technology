
V1_ParallelIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000528  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000046  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__ctors_end>:
   0:	0f ef       	ldi	r16, 0xFF	; 255
   2:	00 93 5d 00 	sts	0x005D, r16
   6:	00 e1       	ldi	r16, 0x10	; 16
   8:	00 93 5e 00 	sts	0x005E, r16
   c:	0e 94 35 00 	call	0x6a	; 0x6a <main_05>

00000010 <donothing>:
  10:	0c 94 08 00 	jmp	0x10	; 0x10 <donothing>

00000014 <main_01>:
  14:	0e 94 45 00 	call	0x8a	; 0x8a <initPorts_Ain_Bout>
  18:	8f ef       	ldi	r24, 0xFF	; 255
  1a:	0e 94 5a 00 	call	0xb4	; 0xb4 <putByteLED_B>
  1e:	74 e6       	ldi	r23, 0x64	; 100
  20:	0e 94 5f 00 	call	0xbe	; 0xbe <wait_ms>

00000024 <loop_01>:
  24:	80 95       	com	r24
  26:	0e 94 5a 00 	call	0xb4	; 0xb4 <putByteLED_B>
  2a:	74 e6       	ldi	r23, 0x64	; 100
  2c:	0e 94 5f 00 	call	0xbe	; 0xbe <wait_ms>
  30:	0c 94 12 00 	jmp	0x24	; 0x24 <loop_01>
  34:	08 95       	ret

00000036 <main_02>:
  36:	0e 94 45 00 	call	0x8a	; 0x8a <initPorts_Ain_Bout>
  3a:	0e 94 7b 00 	call	0xf6	; 0xf6 <wait4key_A>
  3e:	86 2f       	mov	r24, r22
  40:	0e 94 5a 00 	call	0xb4	; 0xb4 <putByteLED_B>
  44:	7f ef       	ldi	r23, 0xFF	; 255
  46:	0e 94 5f 00 	call	0xbe	; 0xbe <wait_ms>
  4a:	0c 94 1b 00 	jmp	0x36	; 0x36 <main_02>
  4e:	08 95       	ret

00000050 <main_03>:
  50:	0e 94 45 00 	call	0x8a	; 0x8a <initPorts_Ain_Bout>

00000054 <start>:
  54:	81 e0       	ldi	r24, 0x01	; 1

00000056 <loop_3>:
  56:	0e 94 7b 00 	call	0xf6	; 0xf6 <wait4key_A>
  5a:	0e 94 5a 00 	call	0xb4	; 0xb4 <putByteLED_B>
  5e:	80 30       	cpi	r24, 0x00	; 0
  60:	c9 f3       	breq	.-14     	; 0x54 <start>
  62:	88 0f       	add	r24, r24
  64:	0c 94 2b 00 	jmp	0x56	; 0x56 <loop_3>
  68:	08 95       	ret

0000006a <main_05>:
  6a:	0e 94 45 00 	call	0x8a	; 0x8a <initPorts_Ain_Bout>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	58 2f       	mov	r21, r24
  72:	48 e0       	ldi	r20, 0x08	; 8

00000074 <loop_5>:
  74:	0e 94 8f 00 	call	0x11e	; 0x11e <toggle_bit>
  78:	85 2f       	mov	r24, r21
  7a:	0e 94 5a 00 	call	0xb4	; 0xb4 <putByteLED_B>
  7e:	7b e4       	ldi	r23, 0x4B	; 75
  80:	0e 94 5f 00 	call	0xbe	; 0xbe <wait_ms>
  84:	0c 94 3a 00 	jmp	0x74	; 0x74 <loop_5>
  88:	08 95       	ret

0000008a <initPorts_Ain_Bout>:
* Parameter: keine
* Rückgabe: keine
*/
; /\ alles pushen, was kein Parameter ist und verwendet wird
initPorts_Ain_Bout:
	push r16 ; Inhalt von r16 retten
  8a:	0f 93       	push	r16
	lds r16, SREG ; Inhalt des Flagregisters retten
  8c:	00 91 5f 00 	lds	r16, 0x005F
	push r16
  90:	0f 93       	push	r16

	ldi r16, 0x00	; A für Eingabe konfigurieren
  92:	00 e0       	ldi	r16, 0x00	; 0
	sts DDRA, r16
  94:	00 93 3a 00 	sts	0x003A, r16
	ldi r16, 0xff	; Pull-Ups anschalten
  98:	0f ef       	ldi	r16, 0xFF	; 255
	sts PORTA, r16
  9a:	00 93 3b 00 	sts	0x003B, r16

	ldi r16, 0xff	; B für Ausgabe konfigurieren
  9e:	0f ef       	ldi	r16, 0xFF	; 255
	sts DDRB, r16
  a0:	00 93 37 00 	sts	0x0037, r16
	ldi r16, 0xff	; Ausgang auf HI legen -> alle LEDs aus
  a4:	0f ef       	ldi	r16, 0xFF	; 255
	sts PORTB, r16
  a6:	00 93 38 00 	sts	0x0038, r16

	pop r16 		; Inhalt des Flagregisters wiederherstellen
  aa:	0f 91       	pop	r16
	sts SREG, r16
  ac:	00 93 5f 00 	sts	0x005F, r16
	pop r16 		; Inhalt von r16 wiederherstellen
  b0:	0f 91       	pop	r16
	ret 			; die Funktion kehrt zum aufrufenden Programm zurück
  b2:	08 95       	ret

000000b4 <putByteLED_B>:
* Parameter: r24
* Rückgabe: keine
*/
putByteLED_B:

	com r24 		; Soll leuchten, wo eine 1 war -> bitweises invertieren
  b4:	80 95       	com	r24
	sts PORTB, r24 	; In AUsgabe-Register schreiben
  b6:	80 93 38 00 	sts	0x0038, r24
	com r24 		; r24 bleibt unverändert, sonst Problem bei Aufgabe 1
  ba:	80 95       	com	r24

	ret ; die Funktion kehrt zum aufrufenden Programm zurück
  bc:	08 95       	ret

000000be <wait_ms>:
* lokal: r24,r25,r26,r27
* Parameter: r23
* Rückgabe: keine
*/
wait_ms:
	push r16 ; Inhalt von r16 retten
  be:	0f 93       	push	r16
	lds r16, SREG ; Inhalt des Flagregisters retten
  c0:	00 91 5f 00 	lds	r16, 0x005F
	push r16
  c4:	0f 93       	push	r16
	push r24
  c6:	8f 93       	push	r24
	push r25
  c8:	9f 93       	push	r25
	push r26
  ca:	af 93       	push	r26
	push r27
  cc:	bf 93       	push	r27

	lds r27, SREG
  ce:	b0 91 5f 00 	lds	r27, 0x005F
	mov r26, r23 		; wie oft soll der 16-Bitwert in r25:r24
  d2:	a7 2f       	mov	r26, r23

000000d4 <next_wait>:
						; auf 0 heruntergezählt werden? (Wartezähler laden)
next_wait:
	ldi r24, 0x00 		; lädt den Startwert der inneren Zählschleife -> 1 ms
  d4:	80 e0       	ldi	r24, 0x00	; 0
	ldi r25, 0x32
  d6:	92 e3       	ldi	r25, 0x32	; 50

000000d8 <wait_loop>:

wait_loop:
	sbiw r24,1			; zähle 2 Byte-Zahl runter
  d8:	01 97       	sbiw	r24, 0x01	; 1
	brne wait_loop 		; wenn nicht bei 0, springt wieder zu wait_loop
  da:	f1 f7       	brne	.-4      	; 0xd8 <wait_loop>
	
	dec r26 			; wenn ja, dekrementiert den Wartezähler
  dc:	aa 95       	dec	r26
	brne next_wait 		; wenn nicht 0 => Sprung zum erneuten Herunterzählen
  de:	d1 f7       	brne	.-12     	; 0xd4 <next_wait>
						; des 16-Bit-Wertes
	sts SREG, r27
  e0:	b0 93 5f 00 	sts	0x005F, r27

	pop r27		; in umgekehrter Weise Register wiederherstellen
  e4:	bf 91       	pop	r27
	pop r26
  e6:	af 91       	pop	r26
	pop r25
  e8:	9f 91       	pop	r25
	pop r24
  ea:	8f 91       	pop	r24
	pop r16 	; Inhalt des Flagregisters wiederherstellen
  ec:	0f 91       	pop	r16
	sts SREG, r16
  ee:	00 93 5f 00 	sts	0x005F, r16
	pop r16 	; Inhalt von r16 wiederherstellen
  f2:	0f 91       	pop	r16
	ret 		; die Funktion kehrt zum aufrufenden Programm zurück
  f4:	08 95       	ret

000000f6 <wait4key_A>:
* lokal: r16, r23 - Hilfsregister
* Parameter: keine
* Rückgabe: r22
*/
wait4key_A:
	push r16 ; Inhalt von r16 retten
  f6:	0f 93       	push	r16
	lds r16, SREG ; Inhalt des Flagregisters retten
  f8:	00 91 5f 00 	lds	r16, 0x005F
	push r16
  fc:	0f 93       	push	r16

000000fe <wait_loop_key>:

	wait_loop_key:
		lds r16, PINA		; Tastencode in r16 laden
  fe:	00 91 39 00 	lds	r16, 0x0039
		cpi r16, 0x00 		; nicht gedrückt? ACHTUNG: 00 = nicht gedrückt!!! Unterlagen anscheinend FEHLER
 102:	00 30       	cpi	r16, 0x00	; 0
		breq wait_loop_key 	; wiederholen, wenn PINA = 0x00 = nicht gedrückt
 104:	e1 f3       	breq	.-8      	; 0xfe <wait_loop_key>

	lds r22, PINA ; Tastencode zurückgeben
 106:	60 91 39 00 	lds	r22, 0x0039
	ldi r23, 0x0a ; warte 10 ms
 10a:	7a e0       	ldi	r23, 0x0A	; 10

0000010c <wait4keyrelease>:
	;call wait_ms ; Absturz

	wait4keyrelease:
		lds r16, PINA			; Tastencode in r16 laden
 10c:	00 91 39 00 	lds	r16, 0x0039
		cpi r16, 0x00 			; gedrückt?
 110:	00 30       	cpi	r16, 0x00	; 0
		brne wait4keyrelease 	; wenn gedrückt, wiederhole & Aufgabe 2 blieb hier stecken
 112:	e1 f7       	brne	.-8      	; 0x10c <wait4keyrelease>

	pop r16 	; Inhalt des Flagregisters wiederherstellen
 114:	0f 91       	pop	r16
	sts SREG, r16
 116:	00 93 5f 00 	sts	0x005F, r16
	pop r16 ; Inhalt von r16 wiederherstellen
 11a:	0f 91       	pop	r16
	ret ; die Funktion kehrt zum aufrufenden Programm zurück
 11c:	08 95       	ret

0000011e <toggle_bit>:
* Parameter: r20, r21
* Rückgabe: r21
*/
; Aufgabe 4
toggle_bit:
	eor r21, r20 ; A XOR 1 = NOT(A)
 11e:	54 27       	eor	r21, r20
	ret ; die Funktion kehrt zum aufrufenden Programm zurück
 120:	08 95       	ret
